// Generated by view binder compiler. Do not edit!
package com.simats.univault.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.simats.univault.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class CourseMaterialViewBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final ImageView backButton;

  @NonNull
  public final LinearLayout containerLayout;

  @NonNull
  public final TextView textViewCourseTitle;

  @NonNull
  public final Toolbar toolbar;

  private CourseMaterialViewBinding(@NonNull RelativeLayout rootView, @NonNull ImageView backButton,
      @NonNull LinearLayout containerLayout, @NonNull TextView textViewCourseTitle,
      @NonNull Toolbar toolbar) {
    this.rootView = rootView;
    this.backButton = backButton;
    this.containerLayout = containerLayout;
    this.textViewCourseTitle = textViewCourseTitle;
    this.toolbar = toolbar;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static CourseMaterialViewBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static CourseMaterialViewBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.course_material_view, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static CourseMaterialViewBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.backButton;
      ImageView backButton = ViewBindings.findChildViewById(rootView, id);
      if (backButton == null) {
        break missingId;
      }

      id = R.id.containerLayout;
      LinearLayout containerLayout = ViewBindings.findChildViewById(rootView, id);
      if (containerLayout == null) {
        break missingId;
      }

      id = R.id.textViewCourseTitle;
      TextView textViewCourseTitle = ViewBindings.findChildViewById(rootView, id);
      if (textViewCourseTitle == null) {
        break missingId;
      }

      id = R.id.toolbar;
      Toolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      return new CourseMaterialViewBinding((RelativeLayout) rootView, backButton, containerLayout,
          textViewCourseTitle, toolbar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
