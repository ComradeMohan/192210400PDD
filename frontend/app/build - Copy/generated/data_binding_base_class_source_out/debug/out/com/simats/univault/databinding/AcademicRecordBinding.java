// Generated by view binder compiler. Do not edit!
package com.simats.univault.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.ScrollView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.cardview.widget.CardView;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.simats.univault.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class AcademicRecordBinding implements ViewBinding {
  @NonNull
  private final ScrollView rootView;

  @NonNull
  public final ImageView backButton;

  @NonNull
  public final CardView cgpaCard;

  @NonNull
  public final TextView cgpaValue;

  @NonNull
  public final ConstraintLayout completedCourses;

  @NonNull
  public final CardView completedCoursesCard;

  @NonNull
  public final TextView completedCoursesCount;

  @NonNull
  public final ImageView completedCoursesIcon;

  @NonNull
  public final TextView completedCoursesLabel;

  @NonNull
  public final TextView currentCgpaLabel;

  @NonNull
  public final ProgressBar degreeProgressBar;

  @NonNull
  public final TextView degreeProgressLabel;

  @NonNull
  public final TextView degreeProgressPercentage;

  @NonNull
  public final Button downloadTranscriptButton;

  @NonNull
  public final CardView gradeDistributionCard;

  @NonNull
  public final TextView gradeDistributionLabel;

  @NonNull
  public final LinearLayout gradeDistributionLayout;

  @NonNull
  public final ConstraintLayout pendingCourses;

  @NonNull
  public final CardView pendingCoursesCard;

  @NonNull
  public final TextView pendingCoursesCount;

  @NonNull
  public final ImageView pendingCoursesIcon;

  @NonNull
  public final TextView pendingCoursesLabel;

  @NonNull
  public final Toolbar toolbar;

  private AcademicRecordBinding(@NonNull ScrollView rootView, @NonNull ImageView backButton,
      @NonNull CardView cgpaCard, @NonNull TextView cgpaValue,
      @NonNull ConstraintLayout completedCourses, @NonNull CardView completedCoursesCard,
      @NonNull TextView completedCoursesCount, @NonNull ImageView completedCoursesIcon,
      @NonNull TextView completedCoursesLabel, @NonNull TextView currentCgpaLabel,
      @NonNull ProgressBar degreeProgressBar, @NonNull TextView degreeProgressLabel,
      @NonNull TextView degreeProgressPercentage, @NonNull Button downloadTranscriptButton,
      @NonNull CardView gradeDistributionCard, @NonNull TextView gradeDistributionLabel,
      @NonNull LinearLayout gradeDistributionLayout, @NonNull ConstraintLayout pendingCourses,
      @NonNull CardView pendingCoursesCard, @NonNull TextView pendingCoursesCount,
      @NonNull ImageView pendingCoursesIcon, @NonNull TextView pendingCoursesLabel,
      @NonNull Toolbar toolbar) {
    this.rootView = rootView;
    this.backButton = backButton;
    this.cgpaCard = cgpaCard;
    this.cgpaValue = cgpaValue;
    this.completedCourses = completedCourses;
    this.completedCoursesCard = completedCoursesCard;
    this.completedCoursesCount = completedCoursesCount;
    this.completedCoursesIcon = completedCoursesIcon;
    this.completedCoursesLabel = completedCoursesLabel;
    this.currentCgpaLabel = currentCgpaLabel;
    this.degreeProgressBar = degreeProgressBar;
    this.degreeProgressLabel = degreeProgressLabel;
    this.degreeProgressPercentage = degreeProgressPercentage;
    this.downloadTranscriptButton = downloadTranscriptButton;
    this.gradeDistributionCard = gradeDistributionCard;
    this.gradeDistributionLabel = gradeDistributionLabel;
    this.gradeDistributionLayout = gradeDistributionLayout;
    this.pendingCourses = pendingCourses;
    this.pendingCoursesCard = pendingCoursesCard;
    this.pendingCoursesCount = pendingCoursesCount;
    this.pendingCoursesIcon = pendingCoursesIcon;
    this.pendingCoursesLabel = pendingCoursesLabel;
    this.toolbar = toolbar;
  }

  @Override
  @NonNull
  public ScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static AcademicRecordBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static AcademicRecordBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.academic_record, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static AcademicRecordBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.backButton;
      ImageView backButton = ViewBindings.findChildViewById(rootView, id);
      if (backButton == null) {
        break missingId;
      }

      id = R.id.cgpaCard;
      CardView cgpaCard = ViewBindings.findChildViewById(rootView, id);
      if (cgpaCard == null) {
        break missingId;
      }

      id = R.id.cgpaValue;
      TextView cgpaValue = ViewBindings.findChildViewById(rootView, id);
      if (cgpaValue == null) {
        break missingId;
      }

      id = R.id.completedCourses;
      ConstraintLayout completedCourses = ViewBindings.findChildViewById(rootView, id);
      if (completedCourses == null) {
        break missingId;
      }

      id = R.id.completedCoursesCard;
      CardView completedCoursesCard = ViewBindings.findChildViewById(rootView, id);
      if (completedCoursesCard == null) {
        break missingId;
      }

      id = R.id.completedCoursesCount;
      TextView completedCoursesCount = ViewBindings.findChildViewById(rootView, id);
      if (completedCoursesCount == null) {
        break missingId;
      }

      id = R.id.completedCoursesIcon;
      ImageView completedCoursesIcon = ViewBindings.findChildViewById(rootView, id);
      if (completedCoursesIcon == null) {
        break missingId;
      }

      id = R.id.completedCoursesLabel;
      TextView completedCoursesLabel = ViewBindings.findChildViewById(rootView, id);
      if (completedCoursesLabel == null) {
        break missingId;
      }

      id = R.id.currentCgpaLabel;
      TextView currentCgpaLabel = ViewBindings.findChildViewById(rootView, id);
      if (currentCgpaLabel == null) {
        break missingId;
      }

      id = R.id.degreeProgressBar;
      ProgressBar degreeProgressBar = ViewBindings.findChildViewById(rootView, id);
      if (degreeProgressBar == null) {
        break missingId;
      }

      id = R.id.degreeProgressLabel;
      TextView degreeProgressLabel = ViewBindings.findChildViewById(rootView, id);
      if (degreeProgressLabel == null) {
        break missingId;
      }

      id = R.id.degreeProgressPercentage;
      TextView degreeProgressPercentage = ViewBindings.findChildViewById(rootView, id);
      if (degreeProgressPercentage == null) {
        break missingId;
      }

      id = R.id.downloadTranscriptButton;
      Button downloadTranscriptButton = ViewBindings.findChildViewById(rootView, id);
      if (downloadTranscriptButton == null) {
        break missingId;
      }

      id = R.id.gradeDistributionCard;
      CardView gradeDistributionCard = ViewBindings.findChildViewById(rootView, id);
      if (gradeDistributionCard == null) {
        break missingId;
      }

      id = R.id.gradeDistributionLabel;
      TextView gradeDistributionLabel = ViewBindings.findChildViewById(rootView, id);
      if (gradeDistributionLabel == null) {
        break missingId;
      }

      id = R.id.gradeDistributionLayout;
      LinearLayout gradeDistributionLayout = ViewBindings.findChildViewById(rootView, id);
      if (gradeDistributionLayout == null) {
        break missingId;
      }

      id = R.id.pendingCourses;
      ConstraintLayout pendingCourses = ViewBindings.findChildViewById(rootView, id);
      if (pendingCourses == null) {
        break missingId;
      }

      id = R.id.pendingCoursesCard;
      CardView pendingCoursesCard = ViewBindings.findChildViewById(rootView, id);
      if (pendingCoursesCard == null) {
        break missingId;
      }

      id = R.id.pendingCoursesCount;
      TextView pendingCoursesCount = ViewBindings.findChildViewById(rootView, id);
      if (pendingCoursesCount == null) {
        break missingId;
      }

      id = R.id.pendingCoursesIcon;
      ImageView pendingCoursesIcon = ViewBindings.findChildViewById(rootView, id);
      if (pendingCoursesIcon == null) {
        break missingId;
      }

      id = R.id.pendingCoursesLabel;
      TextView pendingCoursesLabel = ViewBindings.findChildViewById(rootView, id);
      if (pendingCoursesLabel == null) {
        break missingId;
      }

      id = R.id.toolbar;
      Toolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      return new AcademicRecordBinding((ScrollView) rootView, backButton, cgpaCard, cgpaValue,
          completedCourses, completedCoursesCard, completedCoursesCount, completedCoursesIcon,
          completedCoursesLabel, currentCgpaLabel, degreeProgressBar, degreeProgressLabel,
          degreeProgressPercentage, downloadTranscriptButton, gradeDistributionCard,
          gradeDistributionLabel, gradeDistributionLayout, pendingCourses, pendingCoursesCard,
          pendingCoursesCount, pendingCoursesIcon, pendingCoursesLabel, toolbar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
